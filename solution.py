#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Programa para convertir archivos JSON a CSV utilizando Pandas y DataFrames
Autor: Gast√≥n D'Avola
Fecha: 2024

DECISI√ìN DE LIBRER√çAS:
- pandas: Librer√≠a principal para manipulaci√≥n de datos estructurados
  * Ventajas: Manejo eficiente de DataFrames, conversi√≥n nativa JSON/CSV
  * Alternativas consideradas: csv (nativo), numpy (menos funcionalidades)
  * Justificaci√≥n: Pandas ofrece m√©todos directos read_json() y to_csv()

- json: Librer√≠a est√°ndar de Python para manejo de JSON
  * Ventajas: Lectura segura con manejo de errores, control de encoding
  * Alternativas: pandas.read_json() directamente
  * Justificaci√≥n: Mayor control sobre el proceso de lectura y validaci√≥n

- os: Librer√≠a est√°ndar para operaciones del sistema operativo
  * Ventajas: Manejo de rutas multiplataforma, verificaci√≥n de archivos
  * Alternativas: pathlib (m√°s moderno)
  * Justificaci√≥n: Compatibilidad y funcionalidades espec√≠ficas necesarias

- pathlib: Librer√≠a moderna para manejo de rutas
  * Ventajas: Sintaxis m√°s limpia, orientada a objetos
  * Uso: Solo para generar nombres de archivos autom√°ticamente
  * Justificaci√≥n: Complementa os.path con funcionalidades adicionales
"""

import pandas as pd  # Manipulaci√≥n de datos estructurados y conversi√≥n JSON/CSV
import os           # Operaciones del sistema operativo y manejo de rutas
import json         # Lectura y validaci√≥n de archivos JSON
from pathlib import Path  # Generaci√≥n autom√°tica de nombres de archivos


def json_to_csv(json_file_path, csv_file_path=None, encoding='utf-8'):
    """
    Convierte un archivo JSON a formato CSV usando Pandas DataFrame
    
    L√ìGICA DEL ALGORITMO:
    1. Validaci√≥n de entrada: Verificar existencia del archivo JSON
    2. Lectura segura: Usar context manager para manejo autom√°tico de archivos
    3. Detecci√≥n de formato: Identificar si el JSON es objeto o array
    4. Conversi√≥n a DataFrame: Aplicar m√©todo apropiado seg√∫n el formato
    5. Generaci√≥n de CSV: Exportar con configuraci√≥n √≥ptima
    6. Validaci√≥n de salida: Confirmar creaci√≥n exitosa del archivo
    
    Args:
        json_file_path (str): Ruta del archivo JSON de entrada
        csv_file_path (str, optional): Ruta del archivo CSV de salida. 
                                      Si no se especifica, se genera autom√°ticamente
        encoding (str): Codificaci√≥n del archivo (default: 'utf-8')
    
    Returns:
        bool: True si la conversi√≥n fue exitosa, False en caso contrario
    """
    
    try:
        # PASO 1: VALIDACI√ìN DE ENTRADA
        # Verificar existencia del archivo antes de procesarlo
        # Esto evita errores costosos y proporciona feedback claro al usuario
        if not os.path.exists(json_file_path):
            print(f"‚ùå Error: El archivo JSON no existe en la ruta: {json_file_path}")
            return False
        
        print(f"üìñ Leyendo archivo JSON desde: {json_file_path}")
        
        # PASO 2: LECTURA SEGURA DEL JSON
        # Usar context manager ('with') para garantizar cierre autom√°tico del archivo
        # Especificar encoding expl√≠citamente para evitar problemas con caracteres especiales
        with open(json_file_path, 'r', encoding=encoding) as file:
            data = json.load(file)  # json.load() es m√°s eficiente que json.loads() para archivos
        
        # PASO 3: DETECCI√ìN DE FORMATO Y CONVERSI√ìN A DATAFRAME
        # El JSON puede tener dos formatos principales:
        # - Objeto/Diccionario: {clave1: {datos}, clave2: {datos}}
        # - Array/Lista: [{datos1}, {datos2}, {datos3}]
        if isinstance(data, dict):
            # Para objetos JSON: usar orient='index' para que las claves se conviertan en √≠ndice
            # Esto es ideal para datos como {pokemon1: {stats}, pokemon2: {stats}}
            df = pd.DataFrame.from_dict(data, orient='index')
        elif isinstance(data, list):
            # Para arrays JSON: conversi√≥n directa, cada elemento se convierte en una fila
            # Esto es ideal para datos como [{pokemon1}, {pokemon2}, {pokemon3}]
            df = pd.DataFrame(data)
        else:
            # Manejar casos edge: JSON con tipos no soportados (n√∫meros, strings, etc.)
            print("‚ùå Error: El formato del JSON no es compatible")
            return False
        
        # PASO 4: GENERACI√ìN AUTOM√ÅTICA DE NOMBRE DE ARCHIVO
        # Si no se especifica nombre de salida, generar uno autom√°ticamente
        # Usar Path.stem para obtener nombre sin extensi√≥n del archivo original
        if csv_file_path is None:
            json_name = Path(json_file_path).stem  # Extrae nombre sin .json
            csv_file_path = f"{json_name}_converted.csv"  # Agrega sufijo descriptivo
        
        # PASO 5: INFORMACI√ìN DIAGN√ìSTICA DEL DATAFRAME
        # Mostrar estad√≠sticas b√°sicas para validar la conversi√≥n
        # Esto ayuda al usuario a verificar que los datos se procesaron correctamente
        print(f"‚úÖ Datos cargados exitosamente:")
        print(f"   üìä Dimensiones: {df.shape[0]} filas √ó {df.shape[1]} columnas")
        print(f"   üìã Columnas: {list(df.columns)}")
        
        # Mostrar muestra representativa de los datos
        # df.head() muestra las primeras 5 filas por defecto
        # to_string() asegura formato legible en consola
        print("\nüîç Primeras 5 filas del DataFrame:")
        print(df.head().to_string())
        
        # PASO 6: EXPORTACI√ìN A CSV
        # Configuraci√≥n de par√°metros:
        # - index=True: Incluir √≠ndice del DataFrame (√∫til para datos con claves)
        # - encoding='utf-8': Asegurar compatibilidad con caracteres especiales
        print(f"\nüíæ Guardando archivo CSV en: {csv_file_path}")
        df.to_csv(csv_file_path, index=True, encoding=encoding)
        
        # PASO 7: VALIDACI√ìN DE SALIDA
        # Verificar que el archivo se cre√≥ exitosamente y mostrar informaci√≥n
        if os.path.exists(csv_file_path):
            file_size = os.path.getsize(csv_file_path)
            print(f"‚úÖ ¬°Conversi√≥n completada exitosamente!")
            print(f"   üìÅ Archivo creado: {csv_file_path}")
            print(f"   üìè Tama√±o: {file_size:,} bytes")
            return True
        else:
            print("‚ùå Error: No se pudo crear el archivo CSV")
            return False
            
    except json.JSONDecodeError as e:
        # MANEJO DE ERRORES ESPEC√çFICOS: JSON malformado
        # json.JSONDecodeError se activa cuando el archivo no es JSON v√°lido
        # Esto puede ocurrir por: sintaxis incorrecta, caracteres especiales, etc.
        print(f"‚ùå Error al decodificar JSON: {e}")
        return False
    except Exception as e:
        # MANEJO DE ERRORES GEN√âRICOS: Captura cualquier otro error inesperado
        # Esto incluye: errores de permisos, espacio en disco, problemas de memoria, etc.
        print(f"‚ùå Error inesperado: {e}")
        return False


def main():
    """
    Funci√≥n principal del programa
    
    ARQUITECTURA DEL PROGRAMA:
    1. Configuraci√≥n: Definir rutas y nombres de archivos
    2. Validaci√≥n de entorno: Verificar/crear estructura de carpetas
    3. Ejecuci√≥n: Llamar funci√≥n de conversi√≥n con par√°metros espec√≠ficos
    4. Reporte: Mostrar resultado final del proceso
    
    DISE√ëO DE RUTAS:
    - Usar rutas relativas al script para portabilidad
    - Separar datos en carpeta 'dataset' para organizaci√≥n
    - Generar rutas absolutas para evitar problemas de directorio de trabajo
    """
    print("üöÄ Convertidor de JSON a CSV usando Pandas")
    print("=" * 50)
    
    # CONFIGURACI√ìN DE RUTAS Y ARCHIVOS
    # Definir nombres de archivos y carpetas de manera centralizada
    # Esto facilita el mantenimiento y modificaci√≥n del programa
    datasets_folder = 'dataset'                    # Carpeta para almacenar datasets
    json_input_filename = 'pokemonDB_dataset.json'  # Archivo JSON de entrada
    csv_output_filename = 'pokemonDB_converted.csv' # Archivo CSV de salida
    
    # CONSTRUCCI√ìN DE RUTAS ABSOLUTAS
    # os.path.abspath(__file__) obtiene la ruta absoluta del script actual
    # os.path.dirname() obtiene el directorio padre del script
    # Esto garantiza que las rutas funcionen independientemente del directorio de trabajo
    current_dir = os.path.dirname(os.path.abspath(__file__))
    json_file_path = os.path.join(current_dir, datasets_folder, json_input_filename)
    csv_file_path = os.path.join(current_dir, datasets_folder, csv_output_filename)
    
    # VALIDACI√ìN Y CREACI√ìN DE ESTRUCTURA DE CARPETAS
    # Verificar si la carpeta dataset existe, si no, crearla autom√°ticamente
    # Esto mejora la experiencia del usuario evitando errores por carpetas faltantes
    dataset_path = os.path.join(current_dir, datasets_folder)
    if not os.path.exists(dataset_path):
        print(f"‚ùå Error: La carpeta '{datasets_folder}' no existe")
        print(f"   Creando carpeta '{datasets_folder}'...")
        # exist_ok=True evita errores si la carpeta ya existe (condici√≥n de carrera)
        os.makedirs(dataset_path, exist_ok=True)
        print(f"‚úÖ Carpeta '{datasets_folder}' creada")
    
    # EJECUCI√ìN DE LA CONVERSI√ìN
    # Llamar a la funci√≥n principal con las rutas configuradas
    # El valor de retorno indica √©xito o fallo del proceso
    success = json_to_csv(json_file_path, csv_file_path)
    
    # REPORTE FINAL DEL PROCESO
    # Mostrar resultado claro al usuario con informaci√≥n relevante
    if success:
        print("\nüéâ ¬°Proceso completado exitosamente!")
        print(f"   üìÑ Archivo JSON: {json_input_filename}")
        print(f"   üìä Archivo CSV: {csv_output_filename}")
    else:
        print("\nüí• El proceso fall√≥. Revisa los errores anteriores.")


# PUNTO DE ENTRADA DEL PROGRAMA
# Esta condici√≥n asegura que main() solo se ejecute cuando el script se ejecuta directamente
# No se ejecutar√° si el archivo se importa como m√≥dulo en otro script
if __name__ == "__main__":
    main()


"""
RESUMEN DE DECISIONES DE DISE√ëO:

1. ARQUITECTURA MODULAR:
   - Separaci√≥n de responsabilidades: json_to_csv() para l√≥gica, main() para configuraci√≥n
   - Funciones reutilizables que pueden ser importadas en otros proyectos
   - Punto de entrada claro con if __name__ == "__main__"

2. MANEJO DE ERRORES ROBUSTO:
   - Validaci√≥n previa de archivos antes de procesamiento
   - Manejo espec√≠fico de errores JSON vs errores gen√©ricos
   - Retorno de valores booleanos para indicar √©xito/fallo
   - Mensajes de error informativos con emojis para mejor UX

3. FLEXIBILIDAD DE FORMATOS:
   - Soporte para JSON como objeto (diccionario) y array (lista)
   - Detecci√≥n autom√°tica del tipo de datos
   - Generaci√≥n autom√°tica de nombres de archivo de salida

4. CONFIGURACI√ìN CENTRALIZADA:
   - Variables de configuraci√≥n al inicio de main()
   - Rutas absolutas para portabilidad
   - Creaci√≥n autom√°tica de estructura de carpetas

5. EXPERIENCIA DE USUARIO:
   - Mensajes informativos durante el proceso
   - Estad√≠sticas del DataFrame (dimensiones, columnas)
   - Vista previa de los datos procesados
   - Confirmaci√≥n de archivos creados con tama√±o

6. OPTIMIZACIONES DE RENDIMIENTO:
   - Context manager para manejo autom√°tico de archivos
   - Lectura eficiente con json.load() vs json.loads()
   - Configuraci√≥n √≥ptima de pandas para CSV (index=True, encoding)

7. COMPATIBILIDAD:
   - Encoding UTF-8 para caracteres especiales
   - Rutas multiplataforma con os.path.join()
   - Manejo de diferentes tipos de JSON
"""
